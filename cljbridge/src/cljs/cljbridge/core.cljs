(ns cljbridge.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [accountant.core :as accountant]
            [clerk.core :as clerk]
            [reagent.core :as reagent :refer [atom]]
            [reagent.dom :as rdom]
            [reagent.session :as session]
            [reitit.frontend :as reitit]
            [cljs.core.async :refer [<!]]
            [cljs-http.client :as http]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]
    ["/clojurebridge" :clojurebridge]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to cljbridge"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of cljbridge"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of cljbridge"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 10))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of cljbridge")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About cljbridge"]]))

(def city (reagent/atom ""))
(def selection (reagent/atom ""))
(def result (reagent/atom ""))

(defn send-request [city selection]
  (println "Hello. You gave me:" city selection)
  (go (let [url (str "/api/" selection "/" city)
            response (<! (http/get url {:type :json
                                        :async? true}))]
        (println "URL: " url "\nResponse: " (:body response))
        (reset! result (:body response)))))

(defn clojurebridge-page []
  (fn [] [:span.main
          [:h1 "Helsinki Clojurebridge2"]
          [:form {:on-submit #(.preventDefault %)}
           [:p
            [:input {:type :text
                     :value @city
                     :placeholder "City"
                     :on-change #(reset! city (.-value (.-target %)))}]]
           [:div {:on-change #(reset! selection  (.-value (.-target %)))}
            [:div
             [:label [:input {:type :radio :name "radio" :value :forecast}] "Get forecast"]]
            [:div
             [:label [:input {:type :radio :name "radio" :value :history}] "Get history"]]]
           [:button  {:type "submit"
                      :style {:color "green"}
                      :on-click #(send-request @city @selection)} "Click me!"]]
          [:h2 "The result"]
          [:ul
           [:li "Average temperature: " (:avg-temperature @result)]
           [:li "Start: " (:start-date @result)]
           [:li "End: " (:end-date @result)]]]))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :clojurebridge #'clojurebridge-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p
         [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About cljbridge"] " | "
         [:a {:href (path-for :clojurebridge)} "ClojureBridge"]]]
       [page]
       [:footer
        [:p "cljbridge was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))

(defn ^:dev/after-load reload! []
  (mount-root))
